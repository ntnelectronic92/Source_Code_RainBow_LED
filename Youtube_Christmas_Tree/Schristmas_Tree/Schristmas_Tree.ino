const char rowNum =5;
const char colNum =8;
const unsigned long arrayNumTotal = (8 + 6*4 + 9*4 + 16*2 + 5*4 + 9 +8);
unsigned long arrayNumCurrent =0;
char rows[rowNum]= {2,3,4,5,6};
char colums[colNum]={7,8,9,10,11,12,13,A0};
unsigned long timeMillisGet =0;
char r = 0;
char c = 0;

char  arrayFullData[arrayNumTotal][rowNum]={
{0x00,0x00,0x00,0x00,0xFF},//8
{0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,0xFF},
{0x00,0x00,0x00,0x00,0x00}, 
{0x00,0x00,0x00,0x00,0xFF},
{0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,0xFF},
{0x00,0x00,0x00,0x00,0x00},
  
{0x00,0x00,0x00,0x00,0xFF},//6
{0x00,0x00,0x00,0xFF,0x00},
{0x00,0x00,0xFF,0x00,0x00},
{0x00,0xFF,0x00,0x00,0x00},
{0xFF,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,0x00},

{0x00,0x00,0x00,0x00,0xFF},//6
{0x00,0x00,0x00,0xFF,0x00},
{0x00,0x00,0xFF,0x00,0x00},
{0x00,0xFF,0x00,0x00,0x00},
{0xFF,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,0x00},

{0xFF,0x00,0x00,0x00,0x00},//6
{0x00,0xFF,0x00,0x00,0x00},
{0x00,0x00,0xFF,0x00,0x00},
{0x00,0x00,0x00,0xFF,0x00},
{0x00,0x00,0x00,0x00,0xFF},
{0x00,0x00,0x00,0x00,0x00},

{0xFF,0x00,0x00,0x00,0x00},//6
{0x00,0xFF,0x00,0x00,0x00},
{0x00,0x00,0xFF,0x00,0x00},
{0x00,0x00,0x00,0xFF,0x00},
{0x00,0x00,0x00,0x00,0xFF},
{0x00,0x00,0x00,0x00,0x00},

{0x01,0x01,0x01,0x01,0xFF}, //9
{0x02,0x02,0x02,0x02,0xFF},
{0x04,0x04,0x04,0x04,0xFF},
{0x08,0x08,0x08,0x08,0xFF},
{0x10,0x10,0x10,0x10,0xFF},
{0x20,0x20,0x20,0x20,0xFF},
{0x40,0x40,0x40,0x40,0xFF},
{0x80,0x80,0x80,0x80,0xFF},
{0x00,0x00,0x00,0x00,0x00},


{0x01,0x01,0x01,0x01,0xFF}, //9
{0x02,0x02,0x02,0x02,0xFF},
{0x04,0x04,0x04,0x04,0xFF},
{0x08,0x08,0x08,0x08,0xFF},
{0x10,0x10,0x10,0x10,0xFF},
{0x20,0x20,0x20,0x20,0xFF},
{0x40,0x40,0x40,0x40,0xFF},
{0x80,0x80,0x80,0x80,0xFF},
{0x00,0x00,0x00,0x00,0x00},

{0x08,0x08,0x08,0x08,0xFF},//9
{0x04,0x04,0x04,0x04,0xFF},
{0x02,0x02,0x02,0x02,0xFF},
{0x01,0x01,0x01,0x01,0xFF}, 
{0x80,0x80,0x80,0x80,0xFF},
{0x40,0x40,0x40,0x40,0xFF},
{0x20,0x20,0x20,0x20,0xFF},
{0x10,0x10,0x10,0x10,0xFF},
{0x00,0x00,0x00,0x00,0x00},

{0x08,0x08,0x08,0x08,0xFF},//9
{0x04,0x04,0x04,0x04,0xFF},
{0x02,0x02,0x02,0x02,0xFF},
{0x01,0x01,0x01,0x01,0xFF}, 
{0x80,0x80,0x80,0x80,0xFF},
{0x40,0x40,0x40,0x40,0xFF},
{0x20,0x20,0x20,0x20,0xFF},
{0x10,0x10,0x10,0x10,0xFF},
{0x00,0x00,0x00,0x00,0x00},

{0x01,0x01,0x01,0x01,0xFF},//16
{0x03,0x03,0x03,0x03,0xFF},
{0x07,0x07,0x07,0x07,0xFF},
{0x0F,0x0F,0x0F,0x0F,0xFF}, 
{0x1F,0x1F,0x1F,0x1F,0xFF},
{0x3F,0x3F,0x3F,0x3F,0xFF},
{0x7F,0x7F,0x7F,0x7F,0xFF},
{0xFF,0xFF,0xFF,0xFF,0xFF},
{0x7F,0x7F,0x7F,0x7F,0xFF},
{0x3F,0x3F,0x3F,0x3F,0xFF},
{0x1F,0x1F,0x1F,0x1F,0xFF},
{0x0F,0x0F,0x0F,0x0F,0xFF},
{0x07,0x07,0x07,0x07,0xFF}, 
{0x03,0x03,0x03,0x03,0xFF},
{0x01,0x01,0x01,0x01,0xFF},
{0x00,0x00,0x00,0x00,0x00},

{0x01,0x01,0x01,0x01,0xFF},//16
{0x03,0x03,0x03,0x03,0xFF},
{0x07,0x07,0x07,0x07,0xFF},
{0x0F,0x0F,0x0F,0x0F,0xFF}, 
{0x1F,0x1F,0x1F,0x1F,0xFF},
{0x3F,0x3F,0x3F,0x3F,0xFF},
{0x7F,0x7F,0x7F,0x7F,0xFF},
{0xFF,0xFF,0xFF,0xFF,0xFF},
{0x7F,0x7F,0x7F,0x7F,0xFF},
{0x3F,0x3F,0x3F,0x3F,0xFF},
{0x1F,0x1F,0x1F,0x1F,0xFF},
{0x0F,0x0F,0x0F,0x0F,0xFF},
{0x07,0x07,0x07,0x07,0xFF}, 
{0x03,0x03,0x03,0x03,0xFF},
{0x01,0x01,0x01,0x01,0xFF},
{0x00,0x00,0x00,0x00,0x00},


{0xFF,0x00,0x00,0x00,0x00},//5
{0xFF,0xFF,0x00,0x00,0x00},
{0xFF,0xFF,0xFF,0x00,0x00},
{0xFF,0xFF,0xFF,0xFF,0xFF},
{0x00,0x00,0x00,0x00,0x00},

{0xFF,0x00,0x00,0x00,0x00},//5
{0xFF,0xFF,0x00,0x00,0x00},
{0xFF,0xFF,0xFF,0x00,0x00},
{0xFF,0xFF,0xFF,0xFF,0xFF},
{0x00,0x00,0x00,0x00,0x00},

{0xFF,0x00,0x00,0x00,0x00},//5
{0xFF,0xFF,0x00,0x00,0x00},
{0xFF,0xFF,0xFF,0x00,0x00},
{0xFF,0xFF,0xFF,0xFF,0xFF},
{0x00,0x00,0x00,0x00,0x00},

{0xFF,0x00,0x00,0x00,0x00},//5
{0xFF,0xFF,0x00,0x00,0x00},
{0xFF,0xFF,0xFF,0x00,0x00},
{0xFF,0xFF,0xFF,0xFF,0xFF},
{0x00,0x00,0x00,0x00,0x00},

{0xAA,0xAA,0xAA,0xAA,0xFF},//9
{0x55,0x55,0x55,0x55,0xFF},
{0xAA,0xAA,0xAA,0xAA,0xFF},
{0x55,0x55,0x55,0x55,0xFF},
{0xAA,0xAA,0xAA,0xAA,0xFF},
{0x55,0x55,0x55,0x55,0xFF},
{0xAA,0xAA,0xAA,0xAA,0xFF},
{0x55,0x55,0x55,0x55,0xFF},
{0x00,0x00,0x00,0x00,0x00},

{0xFF,0x00,0xFF,0x00,0xFF},//8
{0x00,0xFF,0x00,0xFF,0x00},
{0xFF,0x00,0xFF,0x00,0xFF},
{0x00,0xFF,0x00,0xFF,0x00},
{0xFF,0x00,0xFF,0x00,0xFF},
{0x00,0xFF,0x00,0xFF,0x00},
{0xFF,0x00,0xFF,0x00,0xFF},
{0x00,0xFF,0x00,0xFF,0x00},
};
void initialIO()
{
  for(char i =0;i< rowNum; i++)
  {
   pinMode(rows[i],OUTPUT);  
  }  
  for(char i =0;i< colNum; i++)
  {
   pinMode(colums[i],OUTPUT);  
  } 
}
void setByteRow(char input)
{
  for(int i = 0;i<rowNum;i++)
  {
    digitalWrite(rows[i],((input>> i) & 0x01));
  }  
}
void setByteColum(char input)
{
  for(int i = 0;i<colNum;i++)
  {
     digitalWrite( colums[i] ,((input>> i) & 0x01));
  }  
}
void displayOneLoop()
{
   setByteRow(0xFF);
   setByteColum(arrayFullData[arrayNumCurrent][r]) ; 
   setByteRow(~(0x01 <<r));
   delay(1);
   r++;
   if(r >= rowNum)
   {
     r = 0;  
   }
}
void setup() {
  initialIO();
  Serial.begin(9600);
}
void runLed()
{
    if((unsigned long)(millis() - timeMillisGet) > 100)
    {
      arrayNumCurrent ++;
      if(arrayNumCurrent >= arrayNumTotal)
      {
        arrayNumCurrent = 0; 
      }
      timeMillisGet = millis();
    }
    else
    {
       displayOneLoop();
    }
}

void loop() 
{
   runLed();
}
